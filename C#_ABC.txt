[Kinect]快速上手C#

本人有过一点点 C# 开发的经验，在此分享我在初学 C# 时遇到的一些坑，以便大家能更顺利地上手。我们的目标只是利用 C# 操作 Kinect，因此以下内容也仅限于此，并不是一个完整的 C# 学习提纲，内容也不专业。我只写一些 C# 与 C++ 的不同之处。

1. C# 没有指针，但几乎全是引用

除去 int, double, char, string 等简单类型和 C++ 相同外，其余所有类对象的“名字”都是引用。例如，将一个自定义类型 MyClass 的对象 x 传入一个子函数中，那么在子函数中对 x 的任何修改，也都会导致主函数中的 x 对象被同时修改。C# 中没有 * 和 & 两个指针和引用的符号，但是所有的对象名字，都已经是一个引用了。

2. C# 对象几乎都在堆上动态构造，可自动回收内存

在 C++ 中，我们可以如此定义一个变量：MyClass x; 程序会自动执行 MyClass 的默认构造函数，并将 x 放在栈上。但是在 C# 中，由于变量名称都是引用，因此这样只会生成一个未定义的引用（或者说野指针）。必须写作 MyClass x = new MyClass(); 才会实际构造出一个 MyClass 对象，并让引用 x 指向它；这个对象是放在堆上的。空引用（空指针）写作 null。只有 int, double, char, string 等简单类型，以及 struct 结构体，才是和 C++ 一样放在栈上的。

C# 可以自动回收内存，因此没有也无须执行 delete 操作。一般也可以不写对象的析构函数，不必担心内存泄漏。

3. C# 是严格的面向对象，主函数必须包括在主类 Program 中

类似于 C++ 中的独立于任何类的函数，在 C# 中都必须写成 Program 类的 static 函数。

4. C# 中类的定义和实现是一起的（MyClass.h 和 MyClass.cpp 文件合二为一，成为 MyClass.cs 文件）

直接把类的成员函数的代码写在类的定义中，不会引起重定义的错误。

5. 常见代码对照表（C++ v.s. C#）

cout << "第" << i << "个: " << arr[i] << endl;
Console.WriteLine($"第{i}个: {arr[i]}"); 或者 Console.WriteLine("第" + i.ToString() + "个: " + arr[i].ToString());

int arr[100];
int[] arr = new int[100];

for (int i = 0; i < 100; i++) { ... }
foreach (int i in arr) { ... }

#include "xxx.h"
using xxx.xxx.xxx

int main(int argc, char *argv[]) { return 0; }
class Program { static void Main(string[] args) { } }

整数转字符串： string str = x.ToString();
字符串转整数： int x = Int.Parse(str);

6. C# 中的事件处理与并行任务

C# 中的事件在类型的 IntelliSense 中显示为闪电符号，相当于 Qt 中的信号。事件对应的处理函数相当于 Qt 中的槽。使用语句 ClassA.someEvent += ClassB.someEventHandler; 将两者连接。

事件处理函数（EventHandler）必须包含以下两个参数：object sender 表示事件的发送者的引用，someEventArgs e 表示这个事件对应的参数，类型在事件中定义，可以用这个参数来在信号和处理函数之间传递信息。

并行任务在函数的声明前加关键字 async，表示这是一个异步执行的函数。在异步函数 A 中调用异步函数 B，这个调用是并行执行的，函数 A 并不会等待 B 完成，就可执行接下来的代码。如果要想强制等待 B 完成再执行接下来的语句，可以在调用语句前加关键字 await。正因为如此，在同步函数中调用异步函数，必须使用关键字 await。

待补充...

