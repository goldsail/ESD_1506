
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module IR_LCD_Qsys(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// LCD //////////
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,

	//////////// IR Receiver //////////
	IRDA_RXD,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// LCD //////////
output		          		LCD_BLON;
inout 		     [7:0]		LCD_DATA;
output		          		LCD_EN;
output		          		LCD_ON;
output		          		LCD_RS;
output		          		LCD_RW;

//////////// IR Receiver //////////
input 		          		IRDA_RXD;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [31:0]		DRAM_DQ;
output		     [3:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;


//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================
wire         reset_n;
wire 								Clk_Core;
wire							 	Clk_Sdram;
assign							DRAM_CLK = Clk_Sdram;
Pll	Pll_inst (
	.inclk0 ( CLOCK_50 ),
	.c0 ( Clk_Core ),
	.c1 ( Clk_Sdram ),
	.locked ( reset_n )
	);

kernel u0 (
			.clk_clk                                  (Clk_Core),          //                        clk.clk
			.new_sdram_controller_wire_addr           (DRAM_ADDR),         //  new_sdram_controller_wire.addr
			.new_sdram_controller_wire_ba             (DRAM_BA),           //                           .ba
			.new_sdram_controller_wire_cas_n          (DRAM_CAS_N),        //                           .cas_n
			.new_sdram_controller_wire_cke            (DRAM_CKE),          //                           .cke
			.new_sdram_controller_wire_cs_n           (DRAM_CS_N),         //                           .cs_n
			.new_sdram_controller_wire_dq             (DRAM_DQ),           //                           .dq
			.new_sdram_controller_wire_dqm            (DRAM_DQM),          //                           .dqm
			.new_sdram_controller_wire_ras_n          (DRAM_RAS_N),        //                           .ras_n
			.new_sdram_controller_wire_we_n           (DRAM_WE_N),         //                           .we_n
			.reset_reset_n                            (reset_n),           //                           reset.reset_n
			.lcd_1506_conduit_end_0_export_data (LCD_DATA),          // lcd_1506_conduit_end_0.export_data
			.lcd_1506_conduit_end_0_export_rw   (LCD_RW),            //                       .export_rw
			.lcd_1506_conduit_end_0_export_en   (LCD_EN),            //                       .export_en
			.lcd_1506_conduit_end_0_export_rs   (LCD_RS),            //                       .export_rs
			.lcd_1506_conduit_end_0_export_blon (LCD_BLON),          //                       .export_blon
			.lcd_1506_conduit_end_0_export_on   (LCD_ON),            //                       .export_on
			.ir_1506_conduit_end_0_export      (IRDA_RXD)            // ir_1506_conduit_end_0.export_irda
);



endmodule
