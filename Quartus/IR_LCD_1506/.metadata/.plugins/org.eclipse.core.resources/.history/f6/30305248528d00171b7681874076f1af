/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "LCD_1506_Qsys.h"
#include "altera_avalon_pio_regs.h"

#include "sys/alt_irq.h"

unsigned char LCD_Data[17] = {"IR_1506  waiting"};


unsigned int *pUser_IR;
unsigned int IR_Data;
unsigned char Data_Ready;

unsigned char numberConvert[10][2] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};

void IR_Handler()
{
	Data_Ready = 1;
	IR_Data = *(pUser_IR);
}

int IR_Init()
{
	/*重要提示： 2017.07.12
	 * 1.在注册中断函数时，中断控制器标号和硬件中断号两个参数直接从system.h复制
	 * 2.在Quartus15.0和之前的版本中，生成的system.h文件有Bug,即对于有中断输出信号的模块，其中断控制器标号和硬件中断号
	 *   为-1。
	 * 3.需要手动修改system.h的中断控制器标号和硬件中断号，该号可以在Qsys中看到，并且两个号相同。
	 * */
    int States;
    States = alt_ic_isr_register(
    		 IR_1506_IRQ_INTERRUPT_CONTROLLER_ID,   // 中断控制器标号，从system.h复制
    		 IR_1506_IRQ,                           // 硬件中断号，从system.h复制
    		 IR_Handler,                          // 中断服务子函数
			 NULL,                                    // 指向与设备驱动实例相关的数据结构体
			 0
						);
    return States;
}


void delay();

unsigned int *pUser_GIO_PWM[18];
unsigned int *pUser_PIO[8];

void init();

int process;
int volume;
int index;
unsigned char titles[7] = {
		"1. Alma Mater   ",
		"2. Rock and Roll",
		"3. Rhythm Blues ",
		"4. Classical    ",
		"5. Rap          ",
		"6. Jazz         ",
		"7. Folk         "
};

void displayTitle(int index);

int main()
{
	int process = 0;
	int i;
    init();
    printf("Hello from Nios II!\n");

    for (i = 0; i < 8; i++)
    {
    	IOWR_ALTERA_AVALON_PIO_DATA(pUser_PIO[i], 0);
    }

    for (i = 0; i < 18; i++)
        {
        	*(pUser_GIO_PWM[i]) = 0;
        }

    while (1);

    return 0;
}

void init()
{
	pUser_GIO_PWM[0] = (unsigned int *)USER_GIO_PWM_0_BASE;
	pUser_GIO_PWM[1] = (unsigned int *)USER_GIO_PWM_1_BASE;
	pUser_GIO_PWM[2] = (unsigned int *)USER_GIO_PWM_2_BASE;
	pUser_GIO_PWM[3] = (unsigned int *)USER_GIO_PWM_3_BASE;
	pUser_GIO_PWM[4] = (unsigned int *)USER_GIO_PWM_4_BASE;
	pUser_GIO_PWM[5] = (unsigned int *)USER_GIO_PWM_5_BASE;
	pUser_GIO_PWM[6] = (unsigned int *)USER_GIO_PWM_6_BASE;
	pUser_GIO_PWM[7] = (unsigned int *)USER_GIO_PWM_7_BASE;
	pUser_GIO_PWM[8] = (unsigned int *)USER_GIO_PWM_8_BASE;
	pUser_GIO_PWM[9] = (unsigned int *)USER_GIO_PWM_9_BASE;
	pUser_GIO_PWM[10] = (unsigned int *)USER_GIO_PWM_10_BASE;
	pUser_GIO_PWM[11] = (unsigned int *)USER_GIO_PWM_11_BASE;
	pUser_GIO_PWM[12] = (unsigned int *)USER_GIO_PWM_12_BASE;
	pUser_GIO_PWM[13] = (unsigned int *)USER_GIO_PWM_13_BASE;
	pUser_GIO_PWM[14] = (unsigned int *)USER_GIO_PWM_14_BASE;
	pUser_GIO_PWM[15] = (unsigned int *)USER_GIO_PWM_15_BASE;
	pUser_GIO_PWM[16] = (unsigned int *)USER_GIO_PWM_16_BASE;
	pUser_GIO_PWM[17] = (unsigned int *)USER_GIO_PWM_17_BASE;

	pUser_PIO[0] = (unsigned int *)PIO_0_BASE;
	pUser_PIO[1] = (unsigned int *)PIO_1_BASE;
	pUser_PIO[2] = (unsigned int *)PIO_2_BASE;
	pUser_PIO[3] = (unsigned int *)PIO_3_BASE;
	pUser_PIO[4] = (unsigned int *)PIO_4_BASE;
	pUser_PIO[5] = (unsigned int *)PIO_5_BASE;
	pUser_PIO[6] = (unsigned int *)PIO_6_BASE;
	pUser_PIO[7] = (unsigned int *)PIO_7_BASE;

	pUser_IR = (unsigned int *)IR_1506_BASE; //定义指针指向在Qsys中生成的IR驱动模块

	IR_Init();
}

void delay()
{
	// 采用计数延时的办法，等待LCD刷新
	// 此想法  credit to 丁文泽
	int i;
	for (i = 0; i < 100000; i++);
}

void displayTitle(int index)
{
	if (index < 0)
		index = 0;
	if (index > 6)
		index = 6;
	char buffer[17] = "Playing x / 7";
	buffer[8] = '1' + index;
	LCD_Disp(1, 0, "                ", 16);	delay();
	LCD_Disp(1, 0, buffer, 13);	delay();
	LCD_Disp(2, 0, "                ", 16);	delay();
	LCD_Disp(2, 0, titles[index], 16);	delay();
}

